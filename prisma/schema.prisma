// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{

  id                String     @id       @default(uuid())
  email             String     @unique
  name              String?
  imageUrl          String?   

  // profile
  bio               String?
  skills            String[]
  experience        Int?
  resume            Resume?   //1 user, 1 resume
  industry          String?
 // "industry" field is the foreign key, which references to the "industry" row of "IndustryInsight" table
  industryInsights  IndustryInsight?    @relation(fields: [industry], references: [industry])

  assessments       Assessment[]      // 1 user multiple assessments, array
  coverLetters      CoverLetter[]

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Resume{

  id          String    @id @default(cuid())
  userId      String    @unique    // 1-to-1 relation with user
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text // Markdown content
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}

model IndustryInsight{

  id                 String      @id     @default(cuid())
  industry           String      @unique

  users              User[]      //multiple users in same industry

  salaryRanges       Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  growthRate         Float
  demandLevel        DemandLevel       // "High", "Medium", "Low"
  topSkills          String[]
  marketOutlook      MarketOutlook         // "Positive", "Neutral", "Negative"
  keyTrends          String[]
  recommendedSkills  String[]  


  lastUpdated       DateTime    @default(now())
  nextUpdate        DateTime    

  @@index([industry])   //fast filter based on industry
}

model Assessment{

  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])

  quizScore      Float     //  quiz score
  questions      Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category       String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])
}

model CoverLetter{
  id              String    @id @default(cuid())
  userId          String      //multiple coverletters can have same userId, hence not unique
  user            User      @relation(fields: [userId], references: [id])

  content         String
  jobDescription  String?
  companyName     String      // company applying to
  jobTitle        String      // job applying for
  status          String    @default("draft")   //draft, or completed

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])     // for fast filter
}

enum DemandLevel{
  HIGH 
  MEDIUM 
  LOW
}

enum MarketOutlook{
  POSITIVE 
  NEUTRAL 
  NEGETIVE
}